//Platform GAUSS14
// Authors: Saeed Shakib, Khandker Nurul Habib, Jason Hawkins
//Support: Please contact the authors with questions or suggestions at saeed.shakib@mail.utoronto.ca or khandker.nurulhabib@utoronto.ca. 
@
Copyright (c) 2020 Saeed Shakib, Khandker Nurul Habib, Jason Hawkins

All rights reserved.

Permission is hereby granted, without written agreement to use,
copy, modify, and distribute this code and its documentation for research 
purposes, provided that the above copyright notice and the following paragraphs
appear in all copies of this code.

IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS CODE AND ITS DOCUMENTATION, EVEN
IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS
ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO
PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
@

new;
cls;
screen on;

@--->Call the dataset<---@
load DATA[8217,271] = C:\gauss14\__1\C1_913.txt; // Change to upload three different conditions 8217 full dataset, 1800 for test
NOBS =rows(DATA);

@--------------------- Set parameters for choice experiments and set-up ----------@
NSP = 9; @ Number of scenarios for each person @
NRANDOM = 1; @ number of random coefficients here is 1 for tele@
NSIM = 30; @ number of simulations used in each repetition of simulation @

NP = NOBS/NSP; @number of persons participated in the survey@

@==========================================================================@

@-------Seed for random number generator---------------------------------@
NSEED = 40701 ;

@==========================================================================@
@ Generating pseudo-random numbers @

prim = { 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
         73 79 83 89 97 101 103 107 109 113 } ;

SIMS = zeros(NP,1) ;

i = 1 ;
do while i <= NRANDOM ;
   halt1 = halton(10+NP*NSIM,prim[i]) ;
   SIMS = SIMS~halt1 ;
   i = i + 1 ;
 endo ;
 SIMS = SIMS[1:NP, 2:(NRANDOM*NSIM+1)] ;
 print ;
 print "Finished Generating Halton Sequences" ;

@==========================================================================@
@ PROCEDURE for GENERATING HALTON SEQUENCES 				@

proc halton(n,s) ;
   local phi,phif,i,j,y,x,k;
   k = floor(ln(n+1) ./ ln(s)) ;
   phi = {0} ;
   i = 1 ;
   do while i .le k ;
      x = phi ;
      j = 1 ;
      do while j .lt s ;
         y = phi + (j/s^i);
         x = x|y ;
         j = j + 1 ;
      endo ;
      phi = x ;
      i = i + 1 ;
   endo ;
   x = phi ;
   j = 1 ;
   do while j .lt s .and rows(x) .lt (n+1) ;
      y = phi + (j/s^i) ;
      x = x|y ;
      j = j + 1 ;
   endo ;
   phi=cdfni(x[11:(n+1),1]) ;
   phif = reshape((phi)',NP,NSIM) ;
   retp(phif) ;
endp ;


@==========================================================================@
@==========================================================================@

@ Setting the output file @
output file = C:\gauss14\__1\Outputs\BinaryCrossNested_c1.txt; //Change condition tags here
output reset; 

@ Put a title for your output in the quotes below. @
print "Mix logit Binary Cross-nested model";
print ;


proc lpr(b,x);
	
	local VB, VD, VR, VC, PB, PD, PR, PC, PT, PN, LL, L, One, ASC, Err, PErr;
	local Mu, i, Alpha, Avail, j, k, m, n;
    
	VB=zeros(NOBS,2);   	@--->Systematic utility of Relocation Choice<---@
	VD=zeros(NOBS,4);   	@--->Systematic utility of Dwelling Choice<---@
	VR=zeros(NOBS,18);   	@--->Systematic utility of Region Choice<---@
	VC=zeros(NOBS,72);   	@--->Systematic utility of crossed Choice<---@
	ASC=zeros(NOBS,72);   	@--->Systematic utility crossed Choices' alternative specific constants<---@
	PB=zeros(NOBS,1);   	@--->Probability Relocation Nest<---@
	PD=zeros(NOBS,4);   	@--->Probability Dwelling Nest<---@
	PR=zeros(NOBS,18);   	@--->Probability Region Nest<---@
	PC=zeros(NOBS,72);   	@--->Conditional Probability of each alternative<---@
	PT=ones(NOBS,8);   		@--->Probability transition of 144 conditional choices to 8 available conditional choices<---@
	PN=zeros(NOBS,4);   	@--->Probability alternative Choices n<---@
	One=ones(NOBS,1);		@--->Vector of ones for vector calculations<---@
	Mu=zeros(NOBS,2);   	@--->Scales: Root scale is set to 1, CNL scale is going to be estimated<---@
	Alpha=zeros(NOBS,72);   @--->Allocation Parameters<---@
	Avail=zeros(NOBS,72);   @--->Availability indicators<---@
	Err=zeros(NP,NRANDOM);
	PErr=zeros(NOBS,NRANDOM);
	LL=zeros(NOBS,1);		@--->LogLikelihoods for all persons all scenarios<---@
	L=ones(NP,NSIM); 		@--->LogLikelihoods Pearsons and simulations<---@
    
	@--->Defining Scales<---@
	// Base Scale is the Cross Nested Model in the middle. This makes the formulation of cross nested
	// probabilities easier and changes the binary formulation at the upper level just a little bit
	// To ensure scale parameters are estimated to be greater than 1 I use trasformation function 1+e^t
	
	// 1-4 dwelling scale, 5-22 region scale, root scale is set to 1 as the reference for generalized nested mode
	// 2 mus for cross nested model.
	
	// Original: Mu[.,i] = One[.,1]+exp(b[i].*One[.,1]);
	// Original: Mu[.,23] = One[.,1]./(One[.,1] + exp((-1).*b[23]));
	// Simplified: one[.,1].*b[i];
	// Simplified: Mu[.,23] = one[.,1].*b[23];
	
	
	Mu[.,1] = one[.,1];
	
	
	Mu[.,2] = one[.,1].*b[73];
	
	
	@--->Crossed Utility Functions' ASCs<---@
	// Base ASC is for the no relocation alternative which is available for everyone
	for i(1,72,1);
		j = i+0;
		ASC[.,i] = One[.,1].*b[j]; 
	endfor;

	@--->Regions Utility Functions Part<---@	    
	VR[.,1]=b[94].*x[.,182]						;//  Vaughan
	VR[.,2]=b[95].*x[.,183]						;//  Whitby
	VR[.,3]=b[96].*x[.,184]						;//  Crosstown / York
	VR[.,4]=b[97].*x[.,185]						;//  Brampton
	VR[.,5]=b[98].*x[.,186]					;//  Pickering
	VR[.,6]=b[99].*x[.,187]					;//  Oakville
	VR[.,7]=b[100].*x[.,188]					;//  North York
	VR[.,8]=b[101].*x[.,189]					;//  Oshawa
	VR[.,9]=b[102].*x[.,190]					;//  Richmond Hill
	VR[.,10]=b[103].*x[.,191]					;//  Markham
	VR[.,11]=b[104].*x[.,192]					;//  Milton
	VR[.,12]=b[105].*x[.,193]					;//  Ajax
	VR[.,13]=b[106].*x[.,194]					;//  West End Toronto
	VR[.,14]=b[107].*x[.,195]					;//  Scarborough
	VR[.,15]=b[108].*x[.,196]					;//  Etobicoke
	VR[.,16]=b[109].*x[.,197]					;//  East End Toronto
	VR[.,17]=b[110].*x[.,198]					;//  Downtown Toronto
	VR[.,18]=b[111].*x[.,199]					;//  Mississauga
	
	@--->Dwellings Utility Functions Part<---@	    
	VD[.,1]=b[78].*x[.,126] 	+b[79].*x[.,127]	 +b[80].*x[.,178]	+b[84].*(x[.,130].==0) + 	b[88].*(x[.,128].==2)	+ b[91].*(x[.,129].==1) + b[92].*(x[.,129].==0)	+ 	 b[93].*(x[.,131].==0)	;//  Detached
	VD[.,2]=b[78].*x[.,135]	+b[79].*x[.,136]	+b[81].*x[.,179]	+b[85].*(x[.,139].==0)	+ 	b[89].*(x[.,137].==2)	+ b[91].*(x[.,138].==1) + b[92].*(x[.,138].==0)	+ 	 b[93].*(x[.,140].==0)		;//  Semi-Detached
	VD[.,3]=b[78].*x[.,144]	+b[79].*x[.,145]	+b[82].*x[.,180]	+b[86].*(x[.,148].==0)	+ 	b[90].*(x[.,146].==2)	+ b[91].*(x[.,147].==1) + b[92].*(x[.,147].==0)		+ 	 b[93].*(x[.,149].==0)	;//  Condo
	VD[.,4]=b[78].*x[.,153]	+b[79].*x[.,154]	+b[83].*x[.,181]	+b[87].*(x[.,157].==0)	+ 	b[89].*(x[.,155].==2)	+ b[91].*(x[.,156].==1) + b[92].*(x[.,156].==0)		+ 	 b[93].*(x[.,158].==0)	;//  Townhouse
	
	@--->Crossed Utility Functions<---@
	
	for i(1,4,1);
		for j(1,18,1);
			k = (i-1)*18+j;
			VC[.,k] = ASC[.,k] + VD[.,i] + VR[.,j];
		endfor; 
	endfor;
	
	@--->Availablities for Alternatives<---@
	
	for i(1,72,1);
		Avail[.,i] = x[.,(199+i)];
	endfor;
	
	@--->Allocation Parameters<---@ // limit the number of allocation parameters if the model is not converging
	
	// Original: j = i+118;
	// Original: Alpha[.,i] = One[.,1]./(One[.,1] + exp((-1).*b[j]));
	local a1,a2,a3,a4;
	
	for j(1,18,1);
		if (j== 1 or 7 or 9 or 10); //York
			a1 = j;
			a2 = 18 + j;
			a3 = 36 + j;
			a4 = 54 + j;
			Alpha[.,a1] = One[.,1].*b[112];
			Alpha[.,a2] = One[.,1].*b[113];
			Alpha[.,a3] = One[.,1].*b[114];
			Alpha[.,a4] = One[.,1].*b[115];
		elseif (j== 2 or 5 or 8 or 12); //Durham
			a1 = j;
			a2 = 18 + j;
			a3 = 36 + j;
			a4 = 54 + j;
			Alpha[.,a1] = One[.,1].*b[116];
			Alpha[.,a2] = One[.,1].*b[117];
			Alpha[.,a3] = One[.,1].*b[118];
			Alpha[.,a4] = One[.,1].*b[119];
		elseif (j== 3 or 13 or 14 or 15 or 16 or 17); // Toronto
			a1 = j;
			a2 = 18 + j;
			a3 = 36 + j;
			a4 = 54 + j;
			Alpha[.,a1] = One[.,1].*b[120];
			Alpha[.,a2] = One[.,1].*b[121];
			Alpha[.,a3] = One[.,1].*b[122];
			Alpha[.,a4] = One[.,1].*b[123];
		elseif (j== 4 or 6 or 11 or 18 or 17); //peel&Halton
			a1 = j;
			a2 = 18 + j;
			a3 = 36 + j;
			a4 = 54 + j;
			Alpha[.,a1] = One[.,1].*b[124];
			Alpha[.,a2] = One[.,1].*b[125];
			Alpha[.,a3] = One[.,1].*b[126];
			Alpha[.,a4] = One[.,1].*b[127];
		endif;
	endfor;
	
	
	@--->Crossed Probabilities Calculations<---@

	local NNests, NMDenom, cterm, DNests;
	
	NNests = zeros(NOBS,22);
	NMDenom = zeros(NOBS,22);
	DNests = zeros (NOBS,1);
	cterm = zeros(NOBS,72);
	
	// Calculate av*a*e^v for each alternative here
	
	for i(1,4,1);
		for j(1,18,1);
			k = (i-1)*18+j;
			cterm[.,k] = Avail[.,k].*exp(VC[.,k]);
		endfor;
	endfor;
	
	// Calculate Pm which is the probability of each nest like p detached
	
	for m(1,4,1);
		for n(5,22,1);
			k = (m-1)*18+n-4;
			NNests[.,m]= NNests[.,m] + (Alpha[.,k].*cterm[.,k]).^Mu[.,2];
		endfor;
		NNests[.,m]= NNests[.,m].^(one[.,1]./Mu[.,2]);
	endfor;
	
	for m(5,22,1);
		for n(1,4,1);
			k = (n-1)*18+m-4;
			NNests[.,m]= NNests[.,m] + ((one[.,1]-Alpha[.,k]).*cterm[.,k]).^Mu[.,2];
		endfor;
		NNests[.,m]= NNests[.,m].^(one[.,1]./Mu[.,2]);
	endfor;
	
	for i(1,22,1);
		DNests[.,1] = DNests[.,1] + NNests[.,i];
	endfor;
	
	for i(1,4,1);
		PD[.,i] = NNests[.,i]./DNests[.,1];
	endfor;
	
	for i(1,18,1);
		k=i+4;
		PR[.,i] = NNests[.,k]./DNests[.,1];
	endfor;
	
	// Calculate Pn|m which is the probability of each alternative n in each nest m goes through each nest and does like mnl
	
	for m(1,22,1);
		NMDenom[.,m] = NNests[.,m].^Mu[.,2];
	endfor;
	
	for m(1,4,1);
		for n(1,18,1);
			k = (m-1)*18+n;
			PC[.,k]= ((Alpha[.,k].*cterm[.,k]).^Mu[.,2])./NMDenom[.,m];
		endfor;
	endfor;
	
	// Never get rid of zeros you will lose your Matrix calculation

	@--->Binary Utility Calculations<---@
	
	local b1, b2, b3, b4, VT, perlower, perupper, pl, pu;
	VT = zeros(NOBS,8);
	for n(1,18,1);
		b1= n;
		b2= 18 + n;
		b3= 36 + n;
		b4= 54 + n;
		VT[.,1] = VT[.,1] + Alpha[.,b1].*Avail[.,b1].*exp(VC[.,b1]);
		VT[.,2] = VT[.,2] + Alpha[.,b2].*Avail[.,b2].*exp(VC[.,b2]);
		VT[.,3] = VT[.,3] + Alpha[.,b3].*Avail[.,b3].*exp(VC[.,b3]);
		VT[.,4] = VT[.,4] + Alpha[.,b4].*Avail[.,b4].*exp(VC[.,b4]);
		VT[.,5] = VT[.,5] + (one[.,1]-Alpha[.,b1]).*Avail[.,b1].*exp(VC[.,b1]);
		VT[.,6] = VT[.,6] + (one[.,1]-Alpha[.,b2]).*Avail[.,b2].*exp(VC[.,b2]);
		VT[.,7] = VT[.,7] + (one[.,1]-Alpha[.,b3]).*Avail[.,b3].*exp(VC[.,b3]);
		VT[.,8] = VT[.,8] + (one[.,1]-Alpha[.,b4]).*Avail[.,b4].*exp(VC[.,b4]);
	endfor;
	
	VB[.,2] = ln(VT[.,1]+VT[.,2]+VT[.,3]+VT[.,4]+VT[.,5]+VT[.,6]+VT[.,7]+VT[.,8]);
	
	m=0; k=1;
	do while k <= NSIM;
		M = (k-1)*(NRANDOM)+1;
		Err[.,1:NRANDOM] = SIMS[.,M:M+(NRANDOM-1)];		
		
		for n(1,np,1);
			perlower = (n-1)*NSP + 1;
			perupper = n*NSP;
			for j(perlower,perupper,1);
				PErr[j,.] = Err[n,.];
			endfor;
		endfor;
		
		@--->Binary Prob Calculations<---@	
		
		b[74]=1; 	// Used to indicate Covid condition. Not the ideal notation but set to one to reviewers request
		b[75]=1;	// Used to indicate Covid condition. Not the ideal notation but set to one to reviewers request
		VB[.,1]=(0).*One[.,1] +(b[76].*x[.,123]	+b[77].*PErr[.,1])	;//  No Relocation
		
		
				
		PB[.,1]= exp(Mu[.,1].*VB[.,1])./(exp(Mu[.,1].*VB[.,1])+exp(Mu[.,1].*VB[.,2]));
				
		// Calculate Pn which is the probability of each alternative
				
		PN[.,1]= (one[.,1]-PB[.,1]).*(PD[.,1] + PC[.,1].*PR[.,1]+ PC[.,2].*PR[.,2]+ PC[.,3].*PR[.,3]+ PC[.,4].*PR[.,4]+ PC[.,5].*PR[.,5]+ PC[.,6].*PR[.,6]+ PC[.,7].*PR[.,7]+ PC[.,8].*PR[.,8]+ PC[.,9].*PR[.,9]+ PC[.,10].*PR[.,10]+ PC[.,11].*PR[.,11]+ PC[.,12].*PR[.,12]+ PC[.,13].*PR[.,13]+ PC[.,14].*PR[.,14]+ PC[.,15].*PR[.,15]+ PC[.,16].*PR[.,16]+ PC[.,17].*PR[.,17]+ PC[.,18].*PR[.,18]);
		PN[.,2]= (one[.,1]-PB[.,1]).*(PD[.,2] + PC[.,19].*PR[.,1]+ PC[.,20].*PR[.,2]+ PC[.,21].*PR[.,3]+ PC[.,22].*PR[.,4]+ PC[.,23].*PR[.,5]+ PC[.,24].*PR[.,6]+ PC[.,25].*PR[.,7]+ PC[.,26].*PR[.,8]+ PC[.,27].*PR[.,9]+ PC[.,28].*PR[.,10]+ PC[.,29].*PR[.,11]+ PC[.,30].*PR[.,12]+ PC[.,31].*PR[.,13]+ PC[.,32].*PR[.,14]+ PC[.,33].*PR[.,15]+ PC[.,34].*PR[.,16]+ PC[.,35].*PR[.,17]+ PC[.,36].*PR[.,18]);
		PN[.,3]= (one[.,1]-PB[.,1]).*(PD[.,3] + PC[.,37].*PR[.,1]+ PC[.,38].*PR[.,2]+ PC[.,39].*PR[.,3]+ PC[.,40].*PR[.,4]+ PC[.,41].*PR[.,5]+ PC[.,42].*PR[.,6]+ PC[.,43].*PR[.,7]+ PC[.,44].*PR[.,8]+ PC[.,45].*PR[.,9]+ PC[.,46].*PR[.,10]+ PC[.,47].*PR[.,11]+ PC[.,48].*PR[.,12]+ PC[.,49].*PR[.,13]+ PC[.,50].*PR[.,14]+ PC[.,51].*PR[.,15]+ PC[.,52].*PR[.,16]+ PC[.,53].*PR[.,17]+ PC[.,54].*PR[.,18]);
		PN[.,4]= (one[.,1]-PB[.,1]).*(PD[.,4] + PC[.,55].*PR[.,1]+ PC[.,56].*PR[.,2]+ PC[.,57].*PR[.,3]+ PC[.,58].*PR[.,4]+ PC[.,59].*PR[.,5]+ PC[.,60].*PR[.,6]+ PC[.,61].*PR[.,7]+ PC[.,62].*PR[.,8]+ PC[.,63].*PR[.,9]+ PC[.,64].*PR[.,10]+ PC[.,65].*PR[.,11]+ PC[.,66].*PR[.,12]+ PC[.,67].*PR[.,13]+ PC[.,68].*PR[.,14]+ PC[.,69].*PR[.,15]+ PC[.,70].*PR[.,16]+ PC[.,71].*PR[.,17]+ PC[.,72].*PR[.,18]);
							
		@--->LLs Calculations<---@
				
		LL[.,1]=(PB[.,1].^(x[.,114].==0)
				.*PN[.,1].^(x[.,114].==1)
				.*PN[.,2].^(x[.,114].==2)
				.*PN[.,3].^(x[.,114].==3)
				.*PN[.,4].^(x[.,114].==4));
							
		for n(1,np,1);
			pl = (n-1)*NSP + 1;
			pu = n*NSP;
			L[n,k]= LL[pu-8,1]*LL[pu-7,1]*LL[pu-6,1]*LL[pu-5,1]*LL[pu-4,1]*LL[pu-3,1]*LL[pu-2,1]*LL[pu-1,1]*LL[pu,1];
		endfor;

	k = k+1;
	endo;	
	
	retp(ln(sumr(L[.,1:NSIM])/NSIM));

endp;

@--->Starting Values of b<---@
B={
-0.37587
0.117409
-0.35375
-1.42395
-0.74792
-0.20091
-0.23334
-1.19852
0.419692
0.658737
-1.56468
-0.71627
0.047333
-1.34375
-1.15328
-0.59779
-1.54756
-0.42149
-0.0812
-0.57795
-0.63319
-0.62033
-1.19116
-0.93402
-0.65516
-0.8637
-0.29422
-0.2445
-0.72751
-0.17224
-0.64704
-0.90789
-0.42722
-0.07139
-0.58364
-0.30551
-1.06215
-1.14052
-0.45825
-0.67787
-1.38398
-1.04
0.410694
-1.36519
-1.05409
-0.45532
-0.78297
-0.63904
-0.1277
-1.41614
-0.27586
0.075349
-1.19558
-0.51721
-0.0261
-2.13084
-0.55815
-1.00834
-0.63245
-0.64866
-0.78565
-1.72761
-1.0296
-0.76789
-1.06473
-0.72268
-1.48183
-0.58084
0.018096
-0.59683
-1.37857
-0.79647
1.343210
1
1
0.121107
0.877812
-0.0491
0.07468
0.512359
0.10337
-0.14835
0.14136
-0.01216
-0.20954
-0.10189
-0.36417
-0.06234
-0.16041 
-0.26595
-0.29284
-0.66876
-0.23589
-0.59917
0.318666
-0.38079
0.002168
0.272245
0.160088
0.369
0.15873
0.949023
0.329669
0.085849
0.72932
-0.353673
0.295319
0.14994
-0.547998
-0.01776
0.5588
0.5846
0.444
0.3595
0.6232
0.5406
0.2479
0.5381
0.7849
0.6185
0.2501
0.3538
0.7301
0.4343
0.2935
0.3912
};

/*------DO NOT CHANGE ANYTHING BELOW IF YOU DON'T KNOW WHAT YOU ARE DOING------------*/
@--->Calling MAXLIK and provide Likelihood function<---@

print "Starting values:" ;
print B ;

library maxlik,pgraph ;
#include maxlik.ext ;
maxset ;
_max_Algorithm=2;  /* 1=Steep, 2=BFGS, 3=DFP, 4=Newton, 5=BHHH */
_max_LineSearch=2;
_max_GradTol=5e-4;
_max_MaxIters=500;
_max_CovPar=1;  /* 0=H^-1 approximation, 1=H^-1, 2=(gg')^-1, 3=2*1*2 */
__title = "Relocation Binary Nested Logit Model";

{beta,f,g,cov,ret} = maxlik(DATA,0,&lpr,B) ;
call maxprt(beta,f,g,cov,ret);
print ;
print beta ;
@print (_max_FinalHess);@



